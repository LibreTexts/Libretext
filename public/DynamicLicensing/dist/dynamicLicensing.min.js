function buildHTML(e,n){const t=n;let r=`\n    <h2>Overview</h2>\n    <p><strong>Title:</strong> <a href="${e.text.url}" target="_blank" rel="noreferrer">${e.text.title}</a></p>\n    <p><strong>Webpages:</strong> ${e.text.totalPages}</p>\n  `;const i=e.meta.specialRestrictions.map((e=>"noncommercial"===e?"Noncommercial":"noderivatives"===e?"No Derivatives":"fairuse"===e?"Fair Use":null)).filter((e=>null!==e));i.length>0&&(r=`\n      ${r}\n      <p><strong>Applicable Restrictions:</strong> ${i.join(", ")}</p>\n    `),r=`${r}<p><strong>All licenses found:</strong></p>`;let l="<ul>";return e.meta.licenses.forEach((e=>{l=`${l}<li><a href="${e.link}" target="_blank" rel="noreferrer">${e.label}`,e.version&&(l=`${l} ${e.version}`);const n=e.count>1?"pages":"page";l=`${l}</a>: ${e.percent}% (${e.count} ${n})</a></li>`})),r=`${r}${l}</ul>`,r=`\n    ${r}\n    <h2>By Page</h2>\n    <div style="column-count: 2; margin-top: 1em;">\n      <ul style="margin: 0;">\n        ${function e(n){let t=`<li><a href="${n.url}" target="_blank">${n.title}</a>`;if(n.license&&(t=`\n        ${t} - <a href="${n.license?.link}" target="_blank" rel="noreferrer">\n          <em>${n.license?.label} ${n.license?.version||""}</em>\n        </a>\n      `),Array.isArray(n.children)&&n.children.length>0){t=`${t}<ul>`;for(let r=0,i=n.children.length;r<i;r+=1)t=`${t}${e(n.children[r])}`;t=`${t}</ul>`}return t=`${t}</li>`,t}(e.text)}\n      </ul>\n    </div>\n  `,t.innerHTML=r,t.ariaBusy=!1,!0}async function buildLicensingReport(){const e=await LibreTexts.getCoverpage(),[n]=LibreTexts.parseURL();if(!e||!n)return!1;try{const t=document.getElementById("dynamicLicensing");if(!t)throw new Error("No container element found!");t.innerHTML='<p style="text-align: center;">Loading...</p>',t.ariaLive="polite",t.ariaBusy=!0;let r=`https://api.libretexts.org/endpoint/licensereport/${encodeURIComponent(`https://${n}.libretexts.org/${e}`)}`;const i=new URLSearchParams(window.location.search);console.log(i.toString()),null===i.get("no-cache")&&null===i.get("nocache")||(r=`${r}?no-cache`);const l=await fetch(r);if(!l.ok)throw new Error("Unknown error occurred retrieving licensing report.");return buildHTML(await l.json(),t)}catch(e){return console.error(`[DynamicLicensing]: ${e.toString()}`),!1}}LibreTexts?.active?.dynamicLicensing||(LibreTexts.active.dynamicLicensing=!0,LibreTexts.buildLicensingReport=buildLicensingReport,buildLicensingReport());